/**
 * @file tz1em_service.h
 * @brief Header file for TZ10xx TWiC TZ1EM (TZ1000 Series Energy
 * Management).
 * @version V0.0.2.FS (Free Sample - The information in this code is
 * subject to change without notice and should not be construed as a
 * commitment by TOSHIBA CORPORATION SEMICONDUCTOR & STORAGE PRODUCTS
 * COMPANY.
 * @note TZ1EM provides the automatic low energy consumption. The low
 * energy consumption of interal BLE Processor and UART2 is managed by
 * the part of TWIC BLE CE (BLE Controller Extension). Please refer to
 * the twicIfLeCe API group. TZ1EM combines the HOST Core low energy
 * consumption with the BLE CE and the other peripheral modules.
 */

/*
 * COPYRIGHT (C) 2014-2017
 * TOSHIBA CORPORATION STORAGE & ELECTRONIC DEVICES SOLUTIONS COMPANY
 *
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */

#ifndef _TZ1EM_SERVICE_H_
#define _TZ1EM_SERVICE_H_

/* It is the tz1em_service.c that this header file is allowed to be
 * included. */

#include "tz1em.h"

#define TZ1EM_SCHED_VF_COST_VFHI_US (0)
#define TZ1EM_SCHED_VF_COST_VFUM_US (0)
#define TZ1EM_SCHED_VF_COST_VFLM_US (0)
#define TZ1EM_SCHED_VF_COST_VFLO_US (0)

#define TZ1EM_SCHED_OP_COST_VFHI_US (0)
#define TZ1EM_SCHED_OP_COST_VFUM_US (0)
#define TZ1EM_SCHED_OP_COST_VFLM_US (0)
#define TZ1EM_SCHED_OP_COST_VFLO_US (0)

#define TZ1EM_OP_LAG_HI_S0_US    TZ1SM_HAL_HI_SLEEP0_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_S1_US    TZ1SM_HAL_HI_SLEEP1_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_S2_US    TZ1SM_HAL_HI_SLEEP2_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_W_US     TZ1SM_HAL_HI_WAIT_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_WR_US    TZ1SM_HAL_HI_WAIT_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_R_US     TZ1SM_HAL_HI_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_RTC_US   TZ1SM_HAL_HI_RTC_TO_ACTIVE_US
#define TZ1EM_OP_LAG_HI_STOP_US  TZ1SM_HAL_HI_STOP_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_S0_US    TZ1SM_HAL_UM_SLEEP0_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_S1_US    TZ1SM_HAL_UM_SLEEP1_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_S2_US    TZ1SM_HAL_UM_SLEEP2_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_W_US     TZ1SM_HAL_UM_WAIT_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_WR_US    TZ1SM_HAL_UM_WAIT_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_R_US     TZ1SM_HAL_UM_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_RTC_US   TZ1SM_HAL_UM_RTC_TO_ACTIVE_US
#define TZ1EM_OP_LAG_UM_STOP_US  TZ1SM_HAL_UM_STOP_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_S0_US    TZ1SM_HAL_LM_SLEEP0_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_S1_US    TZ1SM_HAL_LM_SLEEP1_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_S2_US    TZ1SM_HAL_LM_SLEEP2_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_W_US     TZ1SM_HAL_LM_WAIT_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_WR_US    TZ1SM_HAL_LM_WAIT_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_R_US     TZ1SM_HAL_LM_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_RTC_US   TZ1SM_HAL_LM_RTC_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LM_STOP_US  TZ1SM_HAL_LM_STOP_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_S0_US    TZ1SM_HAL_LO_SLEEP0_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_S1_US    TZ1SM_HAL_LO_SLEEP1_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_S2_US    TZ1SM_HAL_LO_SLEEP2_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_W_US     TZ1SM_HAL_LO_WAIT_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_WR_US    TZ1SM_HAL_LO_WAIT_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_R_US     TZ1SM_HAL_LO_RETENTION_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_RTC_US   TZ1SM_HAL_LO_RTC_TO_ACTIVE_US
#define TZ1EM_OP_LAG_LO_STOP_US  TZ1SM_HAL_LO_STOP_TO_ACTIVE_US
  
#define TZ1EM_VF_LAG_HI_TO_UM_US TZ1SM_HAL_VF_LAG_HI_TO_UM_US
#define TZ1EM_VF_LAG_HI_TO_LM_US TZ1SM_HAL_VF_LAG_HI_TO_LM_US
#define TZ1EM_VF_LAG_HI_TO_LO_US TZ1SM_HAL_VF_LAG_HI_TO_LO_US
#define TZ1EM_VF_LAG_UM_TO_HI_US TZ1SM_HAL_VF_LAG_UM_TO_HI_US
#define TZ1EM_VF_LAG_UM_TO_LM_US TZ1SM_HAL_VF_LAG_UM_TO_LM_US
#define TZ1EM_VF_LAG_UM_TO_LO_US TZ1SM_HAL_VF_LAG_UM_TO_LO_US
#define TZ1EM_VF_LAG_LM_TO_HI_US TZ1SM_HAL_VF_LAG_LM_TO_HI_US
#define TZ1EM_VF_LAG_LM_TO_UM_US TZ1SM_HAL_VF_LAG_LM_TO_UM_US
#define TZ1EM_VF_LAG_LM_TO_LO_US TZ1SM_HAL_VF_LAG_LM_TO_LO_US
#define TZ1EM_VF_LAG_LO_TO_HI_US TZ1SM_HAL_VF_LAG_LO_TO_HI_US
#define TZ1EM_VF_LAG_LO_TO_UM_US TZ1SM_HAL_VF_LAG_LO_TO_UM_US
#define TZ1EM_VF_LAG_LO_TO_LM_US TZ1SM_HAL_VF_LAG_LO_TO_LM_US

static const uint16_t vf_hi_time_lag[] =
{ 0,
  TZ1EM_VF_LAG_HI_TO_UM_US + TZ1EM_SCHED_VF_COST_VFHI_US,
  TZ1EM_VF_LAG_HI_TO_LM_US + TZ1EM_SCHED_VF_COST_VFHI_US,
  TZ1EM_VF_LAG_HI_TO_LO_US + TZ1EM_SCHED_VF_COST_VFHI_US
};

static const uint16_t vf_um_time_lag[] =
{ TZ1EM_VF_LAG_UM_TO_HI_US + TZ1EM_SCHED_VF_COST_VFUM_US,
  0,
  TZ1EM_VF_LAG_UM_TO_LM_US + TZ1EM_SCHED_VF_COST_VFUM_US,
  TZ1EM_VF_LAG_UM_TO_LO_US + TZ1EM_SCHED_VF_COST_VFUM_US
};

static const uint16_t vf_lm_time_lag[] =
{ TZ1EM_VF_LAG_LM_TO_HI_US + TZ1EM_SCHED_VF_COST_VFLM_US,
  TZ1EM_VF_LAG_LM_TO_UM_US + TZ1EM_SCHED_VF_COST_VFLM_US,
  0,
  TZ1EM_VF_LAG_LM_TO_LO_US + TZ1EM_SCHED_VF_COST_VFLM_US
};

static const uint16_t vf_lo_time_lag[] =
{ TZ1EM_VF_LAG_LO_TO_HI_US + TZ1EM_SCHED_VF_COST_VFLO_US,
  TZ1EM_VF_LAG_LO_TO_UM_US + TZ1EM_SCHED_VF_COST_VFLO_US,
  TZ1EM_VF_LAG_LO_TO_LM_US + TZ1EM_SCHED_VF_COST_VFLO_US,
  0
};


static const uint16_t op_hi_time_lag[] =
{ 0,
  TZ1EM_OP_LAG_HI_S0_US   + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_S1_US   + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_S2_US   + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_W_US    + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_WR_US   + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_R_US    + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_RTC_US  + TZ1EM_SCHED_OP_COST_VFHI_US,
  TZ1EM_OP_LAG_HI_STOP_US + TZ1EM_SCHED_OP_COST_VFHI_US
};

static const uint16_t op_um_time_lag[] =
{ 0,
  TZ1EM_OP_LAG_UM_S0_US   + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_S1_US   + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_S2_US   + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_W_US    + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_WR_US   + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_R_US    + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_RTC_US  + TZ1EM_SCHED_OP_COST_VFUM_US,
  TZ1EM_OP_LAG_UM_STOP_US + TZ1EM_SCHED_OP_COST_VFUM_US
};

static const uint16_t op_lm_time_lag[] =
{ 0,
  TZ1EM_OP_LAG_LM_S0_US   + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_S1_US   + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_S2_US   + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_W_US    + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_WR_US   + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_R_US    + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_RTC_US  + TZ1EM_SCHED_OP_COST_VFLM_US,
  TZ1EM_OP_LAG_LM_STOP_US + TZ1EM_SCHED_OP_COST_VFLM_US
};

static const uint16_t op_lo_time_lag[] =
{ 0,
  TZ1EM_OP_LAG_LO_S0_US   + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_S1_US   + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_S2_US   + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_W_US    + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_WR_US   + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_R_US    + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_RTC_US  + TZ1EM_SCHED_OP_COST_VFLO_US,
  TZ1EM_OP_LAG_LO_STOP_US + TZ1EM_SCHED_OP_COST_VFLO_US
};

typedef struct tz1emWorstRequirement {
  tz1emVf_t sunshine_vf;
  tz1emOm_t mode;
  uint32_t permissible_time_lag_us;
} tz1emWorstRequirement_t;

#define TZ1EM_UPDATE_WORST_REQUIREMENT_CODE_PLACE_A
#undef  TZ1EM_REMOVE_ENTRY_WHEN_SCH

#if defined(TZ1EM_UPDATE_WORST_REQUIREMENT_CODE_PLACE_A)
extern void tz1emUpdateWorstRequirement(
  const bool removal, const tz1emVf_t sunshine_vf,
  const tz1emOm_t mode, const uint32_t permissible_time_lag_us);
#endif
extern void tz1emSsFindVf(
  tz1emVf_t * const sunshine_vf,
  tz1emOm_t * const mode, uint32_t * const permissible_time_lag_us);
extern tz1emStatus_t tz1emSsScheduleAret0Pdvfs(void);
extern tz1emStatus_t tz1emSsInitializePcdSystem(void);
extern tz1emStatus_t tz1emSsStartClock(const tz1emPcd_t pcd);
extern tz1emStatus_t tz1emSsStopClock(const tz1emPcd_t pcd);

#endif /* _TZ1EM_SERVICE_H_ */

